class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       vector<int> ans;
        list<int> l;
        int i=0;
        int j=0;
        int n=nums.size();
        
        // Agr k size se bda hai to max element list me daaldo
        if (k>n) // edge case
        {
            ans.push_back(*max_element(nums.begin(),nums.end()));
            return ans;
        }
        

        while (j<n)
        {   
        // Jbtk list size>0 && list ke sbse upr wla element curr ele se chota hai tbtk pop krte rho
            while(l.size()>0 && l.back() <nums[j])
            {
                l.pop_back();
            }

            // Fir naya element push krdo
            l.push_back(nums[j]);

            // Jbtk window size hit nhi hojata, tbtk j++
            if ((j-i+1)<k)
                j++;

            // Agar hit hogya to l ke front wla daaldo and if l ka front curr element
            // ke equal hai to usko pop krdo    
            else if (j-i+1==k)
            {
                ans.push_back(l.front());
                if (l.front()==nums[i])
                    l.pop_front();
                i++;
                j++;
            }
            
        }
        return ans;
    }
};
